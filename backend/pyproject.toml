[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pokemon"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.111.0"
uvicorn = { extras = ["standard"], version = "^0.29.0" }
sqlalchemy = "^2.0.30"
psycopg2 = "^2.9.3"
ipykernel = "^6.7.0"

[tool.poetry.group.dev.dependencies]
# デバッグ用
black = "^24.4.2"
mypy = "^1.10.0"
ruff = "^0.3.4"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.23.7"
taskipy = "^1.12.2"
coverage = "^7.4.4"
httpx = "^0.27.0"

[tool.ruff]
# The tabulation size to calculate line length.
indent-width = 4
line-length = 200

[tool.ruff.lint]
# A list of rule codes or prefixes to enable
# "B" : flake8-bugbear
# "E", "W" : pycodestyle errors, warnings
# "F" : pyflakes
# "I" : isort
# "N" :
# "ANN" : flake8-annotations
# "C4",  # flake8-comprehensions
# "DTZ", # flake8-datetimez
# "T20", # flake8-print
# "C90", # mccabe
# "PT",  # pytest-style
# "PL" :
# "YTT" : flake8-2020
select = ["B", "E", "F", "I", "N", "W", "ANN", "C4", "C90", "DTZ", "T20", "PT", "PL", "YTT"]
# A list of rule codes or prefixes to ignore
ignore = ["F401", "F841", "W505", "ARG", "I001", "ANN001", "ANN101", "ANN102", "ANN201", "B008", "PLR2004", "N802", "N806", "N803", "ANN202", "E501", "E402"]

# A list of rule codes or prefixes to consider autofixable
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
# A list of rule codes or prefixes to consider non-autofix-able.
unfixable = ["F401", "F841", "W505", "ARG"]

# Exclude a variety of commonly ignored directories.
exclude = [
    "__pycache__",
    "__pypackages__",
    ".venv",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "E501", # Line too long / Mismatch for test data
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10

[tool.black]
target-version = ['py311']
line-length = 200

[tool.mypy]
python_version = "3.11"
no_strict_optional = true
ignore_missing_imports = true
check_untyped_defs = true

[tool.pytest.ini_options]
disable_test_id_escaping_and_forfeit_all_rights_to_community_support = true

[tool.coverage.run]
branch = true
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug",
    "if settings.DEBUG",
    "if TYPE_CHECKING",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.taskipy.tasks]
typecheck = "mypy ."
lint = "ruff check ."
lint-fix = "ruff check . --fix"
format = "ruff format ."
format-check = "ruff format --check ."
dev = "uvicorn app.main:app --host 0.0.0.0 --port 80 --reload"
test = "pytest"
